1. JS插件封装的技巧
  @1 有一类插件，只需要导入JS，然后基于特点的方法执行，可以快速创建出所需要的结构、样式、功能
     这类插件，在其内部：
       + 会动态创建HTML结构
       + 基于行内样式，把需要的样式都编写好
       + 实现出对应的功能和逻辑
     存在的一些问题：
       + 在插件内部，HTML/CSS/JS代码都是混合在一起的，不方便维护
       + 不方便使用者去修改元素的样式以及结构
       + ...
     此类插件适用于，结构和样式很少（或者没有），以及后续几乎不会修改结构和样式的情况！
       + 回到顶部插件
       + 局部滚动的插件「IScroll.js」
       + ...
  @2 大部分插件，都需要开发者按照插件的要求，编写出必须的基本结构和样式(样式可以导入插件提供的基础样式)，然后再导入相应的JS，执行特定的方法，实现出具体的功能！
     例如：Swiper.js
     这类插件，需要开发者使用的时候，按照要求去构建结构、样式等，所以我们需要编写一个详细的使用说明文档！

2. 在封装插件的时候，我们一般都基于面向对象的方式来处理
   + 在相同的页面中，我的插件可能会执行很多次，为了保证每一次调用插件，相互之间不影响，我们采用OOP模式
   + 插件本身是一个类，每一次使用都是创建这个类的一个实例，实例和实例之间是不影响的，对于一些通用的处理方法，实例和实例之间还可以共用！

===============================
NativeApp VS WebApp
  NativeApp 原生的App
    技术栈：安卓开发「java-native」 和 IOS开发「object-c / swift」
    相关特点：
      + 直接安装和运行在手机操作系统中的「应用商店 -> 下载 -> 安装」
      + 优势：性能强、操作体验好、功能强大（直接调用手机各种软硬件，前提需要用户同意）、支持离线缓存...
      + 弊端：不能跨平台「招聘两个开发团队，开发两套产品」、开发的APP需要上传到应用商店「有审核」、很多内容需要用户自主更新才可以看到...
  WebApp H5页面
    技术栈：前端开发相关的技术栈
    相关特点：
      + 无需安装，直接在手机端的浏览器（或webview）中运行 「浏览器 -> 网址 -> 预览页面」
      + 优势：可以跨平台「只需要开发一套产品，安卓/IOS中的浏览器基本上都是webkit内核」、无需上传应用商店（不需要审核）、用户看到的永远是最新的...
      + 弊端：性能和操作体验都差一些（只不过随着技术发展，H5的操作体验也越来越好了）、无法直接调用手机的软硬件（如需调用这些功能，需要宿主环境的支持）、离线缓存效果差...
  当代移动端App开发，是把 NativeApp和WebApp 混合在一起来用！我们把这种方式称之为：Hybrid混合App开发！
  ------
  随着科技的发展，H5占据一款App的比例越来越高，Native比例在快速的降低，直到有的App，Native只需要搭建一个壳子，内容全部都是H5来写的...
  后来出现了一些前端框架，可以帮助我们快速构建出一个App应用的壳子「也就是把我们写的H5套一层App的壳子」
    + PhoneGap
    + Cordova
    + ...
  再后来经过逐步的完善，出现了移动端App开发的前端框架：
    + RN（ReactNative）「基于React语法」
    + uni-app「基于Vue语法」
    + flutter「基于dart语法」
    + ...
    它们属于：基于JS编写代码，最后框架会把我们写的代码，编译为IOS和安卓的代码，实现真正的NativeApp！
  ------
  目前开发App已经是过去式了「开发出来，也不容易推广」，目前主流的模式是“小程序”！
  小程序全部是前端的活（和IOS/安卓没有半毛钱关系）
  小程序的原理：按照平台既定的语法和提供的组件，去实现小程序的相关页面、样式、功能（语法和平时前端开发类似，但是也有一些区别），在小程序内部也可以调用平台提供的方法...最后把开发完毕的小程序，部署到指定的平台运行！
    目前有一些前端框架，只需要我们写一套代码，就可以生成多套小程序
    + uni-app「Vue语法」
    + taro「React语法」
    + ...