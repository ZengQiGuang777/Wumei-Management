当代前端性能优化的主要方案：CRP思想「按照关键的渲染路径进行优化」；再结合一些性能监测工具，可以分析出性能消耗较大的地方，有针对性的进行优化；但最后整体来讲，我们主要还是围绕以下几方面进行优化：
  第一部分：加快打包速度和降低打包后文件的体积
    + 基于DllPlugin插件，把一些固定不变的依赖进行缓存，后期打包的时候就不会再打包这些文件了！
    + 可基于新一代打包工具 vite/turbopack 代替 webpack！
    + 基于 SplitChunksPlugin 插件对代码进行分割，让页面首次加载的JS文件变的更小！
    + 在webpack打包编译的时候，尤其是生产环境下，我们应该取消ESLint的检测、取消sourceMap文件的生成，以此来加快项目的打包速度！
    + 应该尽可能忽略对 node_modules 的处理，加快打包的速度
    + ...

  第二部分：提高页面第一次渲染的速度
    + 减少HTTP请求的次数和大小
      + 使用 CSS Sprite（雪碧图）技术，把N多小图合并为一张大图
      + 对于非关键性资源（例如：图片、第三方插件、音视频等等），在页面首次渲染的时候，进行懒加载
      + 尽可能的进行封装，减少页面冗余代码，降低打包后文件的体积（还需要对代码进行压缩）
      + 第三方UI组件库需要按需导入
      + 服务器端开启GZIP压缩，加快HTTP的传输效率
      + 把CSS合并为一个，JS也合并为一个，以此来减少HTTP请求的次数！
    + 前端骨架屏技术
      这种方式，可以让页面第一次更快的渲染出来，减少白屏等待时间！
      + SSR服务器渲染的骨架屏「主流模式」：vue + nuxt.js + node.js
    在服务器抗压能力较强的情况下，页面的首屏信息是服务器渲染的；第一次加载页面，只要向服务器发送请求，请求回来的HTML页面中，首屏的内容已经是在服务器渲染好的，客户端直接呈现即可！
    其余屏的数据，依然借用客户端骨架屏方案，由客户端动态获取数据进行绑定！
      + 客户端骨架屏：在页面第一次渲染的时候，把需要呈现内容的部分，用一些骨架(可以是灰色背景，也可以是Loading效果)先占位，第一次渲染完，再向服务器发送请求，把获取的真实数据，渲染到指定的区域！
    + 开启静态资源文件的CDN部署
    + 基于 Connection:keep-alive 保持TCP通道的长链接，防止每一次请求都要进行三握四挥，加快资源的获取
    + 减少对Cookie的使用，因为每一次向服务器发送请求，都会把本地的cookie自动传递给服务器
    + 资源要分服务器进行部署，在增加了DNS解析次数的基础上，使用DNS预解析，来加快域名解析速度！
    + 针对于图片方面的处理
      + 使用字体图标或者矢量图，来代替位图
      + 网站中使用位图，优先使用 webp 格式，其次是 jpeg/jpg 、png 、gif 这些格式
      + 基于webpack，对小于一定范围的图片进行BASE64处理，减少HTTP请求的次数，加快图片的渲染！「但是不要乱用，因为使用了BASE64，会增加html/css等文件的体积；而且增加了代码维护的成本(我们一般都需要基于webpack进行base64编译)」
      + ...
    + 对于数据请求，可以采用分批次（例如：分页、触底加载）和异步加载（或数据的延迟加载）
    + 建议减少对 @import 的使用，因为其会阻塞GUI的渲染！对于移动端页面，如果样式代码较少，可以使用内嵌式！
    + 尽量把<link>放在页面的头部，让CSS资源的获取和GUI的渲染同时进行，加快页面的渲染；尽量把<script>放在页面的尾部，因为其会阻碍GUI的渲染，当然也可以基于设置async/defer，让<script>变为异步的！
    + 在SPA单页面应用开发的时候，一定要做 路由懒加载！「目的：把各组件的代码分开打包，减少主JS的体积，加快页面第一次渲染的速度」
    + 网站可以采用 HTTP/2.0 协议！ 
    + 减少HTML的层级嵌套，加快DOM-Tree的构建!
    + 在Vue/React的项目开发中，我们可以把一些文件，以单独的JS形式导入，例如：
      <script src="../vue.min.js"></script>
      <script src="../main.deqwewe.js"></script>
      这样做，可以让不会改变的框架代码，一直使用的是缓存机制！！

  第三部分：提高项目运行时的性能
    + 使用 防抖、节流 处理：防抖是只触发一次，节流是降低触发频率！
    + 合理使用闭包，并且手动清除不用的内存，以减少内存的开销「注意内存泄漏问题」！
    + 减少直接操作DOM，降低页面的重排(回流)和重绘！
    + 基于事件委托实现事件的绑定，可以提高产品运行的性能「提高40%~60%」
    + 对静态资源文件开启强缓存和协商缓存，对ajax请求的数据，基于本地存储进行临时性的缓存！
    + 在编写CSS样式的时候，要精简选择器(尤其是选择器前缀)，因为CSS选择器是从右到左渲染的
    + 尽可能的使用CSS3动画（尤其是配合 transform 修改元素的样式），减少对JS动画（比如定时器、requestAnimationFrame）的使用，坚决不用flash动画，因为CSS动画性能更好！
    + 减少对CSS表达式的使用「例如：expression、calc」,这些东西都比较消耗性能
    + 项目开发中，一定要规避死循环/死递归，而且减少for/in循环的使用；基于循环处理指定的逻辑时，要考虑“时间复杂度 O(n)”，减少循环的嵌套！
    + 在项目开发中（尤其是Vue/React框架开发中），在组件销毁的时候，记得清除手动设置的 定时器、监听器 等，释放无用的内存！
    + 减少页面中 iframe 的使用！「<iframe>相当于视图框架，可以允许在父页面中，嵌入子页面；window.length 记录的就是页面中iframe的数量」
    + 超长列表的虚拟滚动处理「以后讲」
    + 对于需要实时通信的需求（例如：微信聊天、股市走向图、直播类、支付中的某些需求...）, 尽可能基于 scoket.io 代替 定时器的长轮询！
    + 在Vue/React中，循环创建的元素一定要设置唯一的key值，而且最好不要用索引，因为这个key值是用来优化DOM-DIFF的！对于计算属性和监听器（computed/watch、useMemo/useCallback），也需要合理的使用，因为他们本身就消耗一些性能！
    + JS中不要使用 with/eval 等语句，因为这些语句非常非常消耗性能！
    + 对于较大的图片上传，我们可以使用切片上传和断点续传
    + 减少对Table标签的使用！
    + vue中合理选择v-show和v-if，v-show适用于频繁切换节点，v-if适合只更改一次的情况!
    + 在React框架中，基于 shouldComponentUpdate 进行组件更新优化！{例如：继承PureComponent来对新老属性/状态进行浅比较}
    + 在Vue开发中，把从服务器获取的数据基于 Object.freeze() 进行冻结，让其不成为响应式数据！
    + 在SPA单页面项目中，对于某些组件采用 <keep-alive> 实现组件的缓存

-----------
重排(回流)和重绘
  页面第一次渲染，一定会触发一次重排(Layout)和重绘(Painting)
  重排(回流)：根据视口大小，计算元素在视口中的位置和样式
    + 当我们进行了 修改了视口大小、修改了元素的位置、修改了元素大小、删除/新增元素 等操作，浏览器会重新计算所有元素在视口中的位置和样式「针对某一层处理」，这就是重排/回流「Reflow」
    + 而且重排之后，一定会触发重绘
    + 所以重排这个操作是非常消耗性能的！「这也是操作DOM消耗性能的原因」
  重绘：按照规划好的样式，绘制页面
    + 当我们修改了元素的 背景颜色、文字颜色、透明度 等样式，这些样式不会改变元素的位置和大小，不需要重排，只需要重新绘制相应的元素即可
    + 如果想让页面中有变化，重绘是必不可免的！
所以真实项目中，减少DOM的重排(回流)是非常重要的“性能优化手段”！
  @1 不直接操作DOM，而是使用Vue/React等框架，基于“数据驱动视图渲染”「底层机制是虚拟DOM -> 真实DOM」，而框架内部在处理真实DOM的时候，已经尽可能减少了DOM重排的问题！
  @2 利用浏览器的渲染队列机制，把元素样式的读写操作进行分离
    box.style.width = '200px'
    box.style.height = '100px'
    box.style.margin = '0 auto'
    // 这样操作只会引发“一次”重排：遇到每一行修改样式的代码，浏览器并没有立即渲染，而是把其加入到渲染队列中，等待同步操作结束后，再把渲染队列中的，修改样式的操作，统一渲染一次！！

    box.style.width = '200px'
    console.log(box.offsetWidth)
    box.style.height = '100px'
    console.log(box.offsetHeight)
    box.style.margin = '0 auto'
    // 这样操作会触发“三次”重排：每当遇到获取元素样式的操作，会立即“刷新渲染队列”

    box.style.width = '200px'
    box.style.height = '100px'
    box.style.margin = '0 auto'
    console.log(box.offsetWidth)
    console.log(box.offsetHeight)
    // 这样操作会触发“一次”重排

    box.style.cssText=`width:200px;height:100px;margin:0 auto;`
    console.log(box.offsetWidth)
    // 这样操作会触发“一次”重排「或者基于修改元素的样式类名来修改元素的样式」
  @3 新增元素的时候，要采用统一批处理的方式
    let arr=new Array(10).fill(null)
    arr.forEach(()=>{
        let div=document.createElement('div')
        document.body.appendChild(div)
    })
    // 这样会触发“十次”重排
    
    let str=``
    arr.forEach(()=>{
        str+=`<div> ... </div>`
    })
    document.body.innerHTML += str
    // 这样会触发“一次”重排「只不过这个方案，会对body中原有元素产生影响(比如：原有元素绑定的事件都没了)」

    let frag=document.createDocumentFragment() //创建一个文档碎片（临时存放DOM元素的容器）
    arr.forEach(()=>{
        let div=document.createElement('div')
        frag.appendChild(div) //把每一轮循环创建的元素，先放在文档碎片中
    })
    document.body.appendChild(frag) //最后把整个文档碎片插入到页面中
    // 这样会触发“一次”重排
  @4 在JS中，尽可能使用 transform 变形属性，来修改元素的样式，因为修改 transform 样式，不会引发重排！
  @5 把要修改样式的元素（尤其是需要频繁修改的，例如：JS动画），放在单独的文档流中！这样即便发生重排，也是对当前层处理，对其它层没有影响！
  @6 在实现动画的时候，我们可以牺牲平滑度来换取速度！
  ....