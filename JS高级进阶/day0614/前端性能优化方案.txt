1. 使用 CSS Sprite（雪碧图）技术，把N多小图合并为一张大图，以后只要从服务器获取这张大图，再基于背景定位，就可以使用对应的小图了！ --> 减少HTTP请求的次数
2. 使用 防抖、节流 处理：防抖是只触发一次，节流是降低触发频率！
3. 对于非关键性资源（例如：图片、第三方插件、音视频等），在页面首次渲染的时候，进行懒加载，以此来提高页面第一次加载的速度！
4. 降低文件的体积，例如：减少冗余代码、对代码/文件进行压缩等
5. 开启静态资源文件的CDN部署(地域分布式部署，但是此方案烧钱)！
6. 合理使用闭包，并且手动清除不用的内存，以减少内存的开销「注意内存泄漏问题」！
7. 减少直接操作DOM，降低页面的重排(回流)和重绘！
8. 基于事件委托实现事件的绑定，可以提高产品运行的性能「提高40%~60%」
9. 在Vue/React框架开发的项目中，如果使用了第三方UI组件库，我们要开启按需导入，目的：降低打包后文件的体积！
10. 对静态资源文件开启强缓存和协商缓存，对ajax请求的数据，基于本地存储进行临时性的缓存！
11. 减少对Cookie的使用，因为每一次向服务器发送请求，都会把本地的cookie信息自动传递给服务器（不管服务器是否需要），如果Cookie存储很多，那么将降低每一次请求的速度！！
12. 资源要分服务器进行部署，在增加了DNS解析次数的基础上，使用DNS预解析，来加快域名解析速度！
13. 使用字体图标或者矢量图，来代替位图！这样不仅加载速度快(矢量图一般都很小)，而且不存在模糊的问题！
14. 对于数据请求，可以采用分批次（例如：分页、触底加载）和异步加载（或数据的延迟加载）


-----------
重排(回流)和重绘
  页面第一次渲染，一定会触发一次重排(Layout)和重绘(Painting)
  重排(回流)：根据视口大小，计算元素在视口中的位置和样式
    + 当我们进行了 修改了视口大小、修改了元素的位置、修改了元素大小、删除/新增元素 等操作，浏览器会重新计算所有元素在视口中的位置和样式「针对某一层处理」，这就是重排/回流「Reflow」
    + 而且重排之后，一定会触发重绘
    + 所以重排这个操作是非常消耗性能的！「这也是操作DOM消耗性能的原因」
  重绘：按照规划好的样式，绘制页面
    + 当我们修改了元素的 背景颜色、文字颜色、透明度 等样式，这些样式不会改变元素的位置和大小，不需要重排，只需要重新绘制相应的元素即可
    + 如果想让页面中有变化，重绘是必不可免的！
所以真实项目中，减少DOM的重排(回流)是非常重要的“性能优化手段”！
  @1 不直接操作DOM，而是使用Vue/React等框架，基于“数据驱动视图渲染”「底层机制是虚拟DOM -> 真实DOM」，而框架内部在处理真实DOM的时候，已经尽可能减少了DOM重排的问题！
  @2 利用浏览器的渲染队列机制，把元素样式的读写操作进行分离
    box.style.width = '200px'
    box.style.height = '100px'
    box.style.margin = '0 auto'
    // 这样操作只会引发“一次”重排：遇到每一行修改样式的代码，浏览器并没有立即渲染，而是把其加入到渲染队列中，等待同步操作结束后，再把渲染队列中的，修改样式的操作，统一渲染一次！！

    box.style.width = '200px'
    console.log(box.offsetWidth)
    box.style.height = '100px'
    console.log(box.offsetHeight)
    box.style.margin = '0 auto'
    // 这样操作会触发“三次”重排：每当遇到获取元素样式的操作，会立即“刷新渲染队列”

    box.style.width = '200px'
    box.style.height = '100px'
    box.style.margin = '0 auto'
    console.log(box.offsetWidth)
    console.log(box.offsetHeight)
    // 这样操作会触发“一次”重排

    box.style.cssText=`width:200px;height:100px;margin:0 auto;`
    console.log(box.offsetWidth)
    // 这样操作会触发“一次”重排「或者基于修改元素的样式类名来修改元素的样式」
  @3 新增元素的时候，要采用统一批处理的方式
    let arr=new Array(10).fill(null)
    arr.forEach(()=>{
        let div=document.createElement('div')
        document.body.appendChild(div)
    })
    // 这样会触发“十次”重排
    
    let str=``
    arr.forEach(()=>{
        str+=`<div> ... </div>`
    })
    document.body.innerHTML += str
    // 这样会触发“一次”重排「只不过这个方案，会对body中原有元素产生影响(比如：原有元素绑定的事件都没了)」

    let frag=document.createDocumentFragment() //创建一个文档碎片（临时存放DOM元素的容器）
    arr.forEach(()=>{
        let div=document.createElement('div')
        frag.appendChild(div) //把每一轮循环创建的元素，先放在文档碎片中
    })
    document.body.appendChild(frag) //最后把整个文档碎片插入到页面中
    // 这样会触发“一次”重排
  @4 在JS中，尽可能使用 transform 变形属性，来修改元素的样式，因为修改 transform 样式，不会引发重排！
  @5 把要修改样式的元素（尤其是需要频繁修改的，例如：JS动画），放在单独的文档流中！这样即便发生重排，也是对当前层处理，对其它层没有影响！
  @6 在实现动画的时候，我们可以牺牲平滑度来换取速度！
  ....
