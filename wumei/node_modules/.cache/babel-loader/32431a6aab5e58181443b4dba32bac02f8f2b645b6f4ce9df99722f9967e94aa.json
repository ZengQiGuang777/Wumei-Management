{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport ut from '@/assets/utils';\nimport router from '@/router';\nexport default {\n  data() {\n    // 校验密码的格式\n    const validatePassword = (_, value, callback) => {\n      // if (value === place) return callback()\n      if (value.length === 0) return callback(new Error('密码是必填项哦~'));\n      /* let reg = /^\\S*(?=\\S{6,})(?=\\S*\\d)(?=\\S*[A-Z])(?=\\S*[a-z])(?=\\S*[!@#$%^&*? ])\\S*$/\n      if (!reg.test(value)) return callback(new Error('密码格式有误~')) */\n      callback();\n    };\n    return {\n      captcha: {\n        isLoading: true,\n        img: '',\n        uuid: ''\n      },\n      ruleForm: {\n        username: '',\n        password: '',\n        code: '',\n        remeber: false\n      },\n      rules: {\n        username: [{\n          required: true,\n          message: '账号必须要填哦',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          validator: validatePassword,\n          trigger: 'blur'\n        }],\n        code: [{\n          required: true,\n          message: '验证码也必须要填铁汁',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  /* 在创建的时候发一次请求 */\n  created() {\n    this.queryCaptcha();\n  },\n  methods: {\n    //获取验证码\n    async queryCaptcha() {\n      this.captcha.isLoading = true;\n      try {\n        let {\n          code,\n          img,\n          uuid\n        } = await this.$API.queryCaptchaImage();\n        if (+code !== 200) {\n          this.$message.error('网络出现异常，请稍后再试');\n        } else {\n          this.captcha.img = `data:image/jpeg;base64,${img}`;\n          this.captcha.uuid = uuid;\n        }\n      } catch (err) {\n        console.log(err);\n      }\n      this.captcha.isLoading = false;\n    },\n    //登录校验\n    async submit() {\n      try {\n        //先进行表单校验\n        await this.$refs.formIns.validate();\n        //获取表单中的数据，向服务器发送请求\n        let {\n          username,\n          password,\n          code,\n          remeber\n        } = this.ruleForm;\n        let {\n          code: resultCode,\n          token,\n          msg\n        } = await this.$API.checkUserLogin({\n          username,\n          password,\n          code,\n          uuid: this.captcha.uuid\n        });\n        //登录失败\n        if (+resultCode !== 200) {\n          this.$message.error(msg);\n          return;\n        }\n        //登录成功\n        //首先设置token\n        ut.storage.set('TK', token);\n        await this.$store.dispatch('setProfileAsync');\n        if (remeber) {\n          ut.storage.set('REMBER', {\n            username,\n            password //真实开发一定要加密\n          });\n        } else {\n          ut.storage.remove('REMBER');\n        }\n        this.$message.success('铁汁，登录成功了');\n        this.$router.push('/home');\n      } catch (_) {\n        console.log({\n          _\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["ut","router","data","validatePassword","_","value","callback","length","Error","captcha","isLoading","img","uuid","ruleForm","username","password","code","remeber","rules","required","message","trigger","validator","created","queryCaptcha","methods","$API","queryCaptchaImage","$message","error","err","console","log","submit","$refs","formIns","validate","resultCode","token","msg","checkUserLogin","storage","set","$store","dispatch","remove","success","$router","push"],"sources":["src/views/users/logOn.vue"],"sourcesContent":["<script>\nimport ut from '@/assets/utils'\nimport router from '@/router';\nexport default {\n    data() {\n        // 校验密码的格式\n        const validatePassword = (_, value, callback) => {\n            // if (value === place) return callback()\n            if (value.length === 0) return callback(new Error('密码是必填项哦~'))\n            /* let reg = /^\\S*(?=\\S{6,})(?=\\S*\\d)(?=\\S*[A-Z])(?=\\S*[a-z])(?=\\S*[!@#$%^&*? ])\\S*$/\n            if (!reg.test(value)) return callback(new Error('密码格式有误~')) */\n            callback()\n        }\n        return {\n            captcha: {\n                isLoading: true,\n                img: '',\n                uuid: ''\n            },\n            ruleForm: {\n                username: '',\n                password: '',\n                code: '',\n                remeber: false\n            },\n            rules: {\n                username: [\n                    {\n                        required: true, message: '账号必须要填哦', trigger: 'blur'\n                    }\n                ],\n                password: [\n                    {\n                        required: true,\n                        validator: validatePassword, trigger: 'blur'\n                    }\n                ],\n                code: [\n                    {\n                        required: true, message: '验证码也必须要填铁汁', trigger: 'blur'\n                    }\n                ],\n            }\n\n        }\n    },\n    /* 在创建的时候发一次请求 */\n    created() {\n        this.queryCaptcha()\n    },\n    methods: {\n        //获取验证码\n        async queryCaptcha() {\n            this.captcha.isLoading = true\n            try {\n                let { code, img, uuid } = await this.$API.queryCaptchaImage()\n                if (+code !== 200) {\n                    this.$message.error('网络出现异常，请稍后再试')\n                } else {\n                    this.captcha.img = `data:image/jpeg;base64,${img}`\n                    this.captcha.uuid = uuid\n                }\n            } catch (err) {\n                console.log(err);\n            }\n            this.captcha.isLoading = false\n        },\n        //登录校验\n        async submit() {\n            try {\n                //先进行表单校验\n                await this.$refs.formIns.validate()\n                //获取表单中的数据，向服务器发送请求\n                let { username, password, code, remeber } = this.ruleForm\n                let { code: resultCode, token, msg } = await this.$API.checkUserLogin({\n                    username,\n                    password,\n                    code,\n                    uuid: this.captcha.uuid\n                })\n                //登录失败\n                if (+resultCode !== 200) {\n                    this.$message.error(msg)\n                    return\n                }\n                //登录成功\n                //首先设置token\n                ut.storage.set('TK', token)\n                await this.$store.dispatch('setProfileAsync')\n                if (remeber) {\n                    ut.storage.set('REMBER', {\n                        username,\n                        password,//真实开发一定要加密\n                    })\n                } else {\n                    ut.storage.remove('REMBER')\n                }\n                this.$message.success('铁汁，登录成功了')\n                this.$router.push('/home')\n            } catch (_) { \n                console.log({_})\n            }\n        }\n    },\n}\n</script>\n\n<template>\n    <a-form-model id=\"container\" ref=\"formIns\" :model=\"ruleForm\" :rules=\"rules\">\n        <a-form-model-item prop=\"username\">\n            <a-input placeholder=\"用户名\" style=\"width: 320px;\" v-model=\"ruleForm.username\">\n                <a-icon slot=\"prefix\" type=\"user\" style=\"color: rgba(0,0,0,.25)\" />\n            </a-input>\n        </a-form-model-item>\n        <a-form-model-item prop=\"password\">\n            <a-input placeholder=\"密码\" style=\"width: 320px;\" type=\"password\" v-model=\"ruleForm.password\">\n                <a-icon slot=\"prefix\" type=\"lock\" style=\"color: rgba(0,0,0,.25)\" />\n            </a-input>\n        </a-form-model-item>\n        <a-form-model-item class=\"checkingBox\" prop=\"code\">\n            <!-- 验证码 -->\n            <div class=\"yzm\">\n                <a-input placeholder=\"验证码\" style=\"width: 220px;\" v-model=\"ruleForm.code\">\n                    <a-icon slot=\"prefix\" type=\"inbox\" style=\"color: rgba(0,0,0,.25)\" />\n                </a-input>\n                <!-- 验证码盒子 -->\n                <div class=\"captcha\">\n                    <a-spin :spinning=\"captcha.isLoading\">\n                        <img :src=\"captcha.img\" alt=\"\" @click=\"queryCaptcha\">\n                    </a-spin>\n                </div>\n            </div>\n        </a-form-model-item>\n        <!-- 记住密码 -->\n        <a-form-model-item prop=\"remeber\">\n            <a-checkbox>\n                记住密码\n            </a-checkbox>\n        </a-form-model-item>\n        <a-form-item class=\"login-form-last\">\n            <a-button type=\"primary\" class=\"login-form-button\" @click=\"submit\">\n                Log in\n            </a-button>\n        </a-form-item>\n    </a-form-model>\n</template>\n\n<style lang=\"less\" scoped>\n#container {\n    margin-top: -300px;\n\n    // text-align: center;\n    .login-form-last {\n        text-align: center;\n    }\n\n    .login-form-button {\n        text-align: center;\n        width: 80%;\n    }\n\n    .yzm {\n        display: flex;\n\n        .captcha {\n            height: 32px;\n            flex: 1;\n            text-align: center;\n            background: rgba(0, 0, 0, 0.05);\n            margin-left: 5px;\n\n            .ant-spin-container {\n                img {\n                    margin-top: -8px;\n                    width: 95px;\n                    height: 34px;\n                    cursor: pointer;\n                }\n            }\n\n            .ant-spin {\n                height: 80%;\n            }\n        }\n    }\n\n}\n</style>"],"mappings":";;AACA,OAAAA,EAAA;AACA,OAAAC,MAAA;AACA;EACAC,KAAA;IACA;IACA,MAAAC,gBAAA,GAAAA,CAAAC,CAAA,EAAAC,KAAA,EAAAC,QAAA;MACA;MACA,IAAAD,KAAA,CAAAE,MAAA,eAAAD,QAAA,KAAAE,KAAA;MACA;AACA;MACAF,QAAA;IACA;IACA;MACAG,OAAA;QACAC,SAAA;QACAC,GAAA;QACAC,IAAA;MACA;MACAC,QAAA;QACAC,QAAA;QACAC,QAAA;QACAC,IAAA;QACAC,OAAA;MACA;MACAC,KAAA;QACAJ,QAAA,GACA;UACAK,QAAA;UAAAC,OAAA;UAAAC,OAAA;QACA,EACA;QACAN,QAAA,GACA;UACAI,QAAA;UACAG,SAAA,EAAAnB,gBAAA;UAAAkB,OAAA;QACA,EACA;QACAL,IAAA,GACA;UACAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QACA;MAEA;IAEA;EACA;EACA;EACAE,QAAA;IACA,KAAAC,YAAA;EACA;EACAC,OAAA;IACA;IACA,MAAAD,aAAA;MACA,KAAAf,OAAA,CAAAC,SAAA;MACA;QACA;UAAAM,IAAA;UAAAL,GAAA;UAAAC;QAAA,eAAAc,IAAA,CAAAC,iBAAA;QACA,KAAAX,IAAA;UACA,KAAAY,QAAA,CAAAC,KAAA;QACA;UACA,KAAApB,OAAA,CAAAE,GAAA,6BAAAA,GAAA;UACA,KAAAF,OAAA,CAAAG,IAAA,GAAAA,IAAA;QACA;MACA,SAAAkB,GAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,GAAA;MACA;MACA,KAAArB,OAAA,CAAAC,SAAA;IACA;IACA;IACA,MAAAuB,OAAA;MACA;QACA;QACA,WAAAC,KAAA,CAAAC,OAAA,CAAAC,QAAA;QACA;QACA;UAAAtB,QAAA;UAAAC,QAAA;UAAAC,IAAA;UAAAC;QAAA,SAAAJ,QAAA;QACA;UAAAG,IAAA,EAAAqB,UAAA;UAAAC,KAAA;UAAAC;QAAA,eAAAb,IAAA,CAAAc,cAAA;UACA1B,QAAA;UACAC,QAAA;UACAC,IAAA;UACAJ,IAAA,OAAAH,OAAA,CAAAG;QACA;QACA;QACA,KAAAyB,UAAA;UACA,KAAAT,QAAA,CAAAC,KAAA,CAAAU,GAAA;UACA;QACA;QACA;QACA;QACAvC,EAAA,CAAAyC,OAAA,CAAAC,GAAA,OAAAJ,KAAA;QACA,WAAAK,MAAA,CAAAC,QAAA;QACA,IAAA3B,OAAA;UACAjB,EAAA,CAAAyC,OAAA,CAAAC,GAAA;YACA5B,QAAA;YACAC,QAAA;UACA;QACA;UACAf,EAAA,CAAAyC,OAAA,CAAAI,MAAA;QACA;QACA,KAAAjB,QAAA,CAAAkB,OAAA;QACA,KAAAC,OAAA,CAAAC,IAAA;MACA,SAAA5C,CAAA;QACA2B,OAAA,CAAAC,GAAA;UAAA5B;QAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}