面试题：Vue 组件间通信有哪几种方式？
在我之前的项目开发中，常见的组件通信方案，主要就是以下几种：
- 父子组件通信（或者具备相同父亲的兄弟组件通信）
  父传(改)子：基于属性、插槽、ref($children)
    + 如果需要传递的是一些值/方法：基于属性即可「子组件中基于 props 注册接收，或者基于 $attrs 获取」
    + 如果需要传递的是一些HTML结构：基于插槽处理「子组件中基于 $slots/$scopedSlots 获取、或者基于 <slot> 组件来渲染」
    + 在父组件中，可以基于 ref($children) 获取子组件的实例，这样就可以很方便的去操作子组件实例上的数据和方法了，然后想干啥干啥！！
  子传(改)父：基于“属性(依赖于属性传递的回调函数)”、发布订阅、$parent
    + 父组件基于属性把“父组件的方法”传递给子组件，子组件内部可以接收到这个方法
      + 如果是把方法执行，此时可以传递一些“子组件的信息”给父组件「实现了 子传父」
      + 而父组件的方法执行，一般都是用来修改父组件信息的「实现了 子改父」
    + $parent：子组件实例上的 $parent 是获取其父组件的实例，然后想干啥干啥！
      $root：获取根组件的实例
    + 发布订阅模式：
      + 父组件调用调用子组件的时候，基于 v-on(@) 向子组件的事件池中注入“自定义事件和方法”
      + 子组件内部，可以基于 $listeners 或者 $emit 通知自定义事件执行「传递相应的实参」
      + 给组件绑定 v-model ，或者传递属性的时候，设置 .sync 修饰符，都是基于此原理完成的
   父子通信方案，是非常非常非常非常非常....重要的知识，总结下来就四个主要途径：属性、插槽、自定义事件、实例，我们使用的UI组件库就是基于这些知识来进行封装的，我们后期自己封装通用的组件，也是基于这些内容来完成的！！
- 剩下的情况，基本上都是基于vuex/pina解决的，主要思路：
  + 创建一个全局的公共容器，来存储需要共享/通信的信息
  + 各组件都可以从容器中获取公共信息，以及修改公共容器中的信息
- 在Vue2项目中，因为每个组件都是Vue的实例，所以我也会在Vue.prototype上，挂载一些通用的信息，供各组件调用
  例如：
  + 把包含接口请求的API挂载到Vue.prototype上
  + UI组件库中，也经常把消息提示的方法放在Vue.prototype上
  + ...
除此之外，我还了解到一些其他的方案，只不过我之前开发的时候，很少用！
  + EventBus事件总线
    + 创建全局通用的Vue实例（或者直接使用根组件实例）
    + 把需要共享的信息挂在到根实例上
    + 某些组件可以基于 $on 向实例的事件池中注入自定义事件
    + 某些组件可以基于 $emit 通知自定义事件执行
  + 基于上下文信息，实现祖先和后代组件的通信(或具备相同祖先的平行组件通信)
    + 在祖先组件中
      + 管理者需要共享的状态信息，以及修改状态的方法
      + 基于 provide 把这些信息和方法，放在上下文中
    + 后代组件，想用啥信息或者方法，直接基于 inject 获取即可！
    但是上下文方案我认为有个bug：上下文中的信息，默认是非响应式的，这样其实很不方便我们的操作，还需要我们特殊处理，我是感觉用起来有点麻烦！
可能还有其它方案，我了解到的就这些，只不过用到的就那几种：父子通信基于属性、插槽、自定义事件、实例；其余基本上都是基于vuex/pina来管理；偶尔会用Vue.prototype...


==========================
面试题：怎样理解 Vue 的单向数据流？

==========================
面试题：父组件可以监听到子组件的生命周期吗？

==========================
面试题：平时开发中，你有没有封装过公共组件？如果封装过，则简单说一下你当时是怎么考虑的！

==========================
面试题：vue中组件和插件有什么区别？