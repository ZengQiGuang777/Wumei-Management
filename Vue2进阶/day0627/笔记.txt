面试题：修饰符 .native 的作用
+ 在我之前的项目中，遇到过这样的需求：当我调用其它组件（比如UI组件库中的组件），基于 v-on(@) 绑定事件和方法，此操作并不是给元素做事件绑定，而是往组件的事件池中注入自定义事件和方法，此时就需要在组件内部，对这个自定义事件，基于 $emit 做处理！
+ 如果在组件中没有相关的处理，则我们注入的自定义事件是没有用的；而UI组件库中的源码我们是无法更改的，我需要的一些事件需求（比如：mouseenter/mouseover），组件库并不支持
+ 此时我们就需要使用 .native 修饰符，设置此修饰符后：
  + 会强制给组件的“根元素”，完成对应的事件绑定，当事件触发，会把我们绑定的方法执行
  + 只不过这些事件必须是浏览器标准事件
而之前的项目中，尤其是调用UI组件库中的组件，native修饰符用的还是很多的！


==========================
面试题：v-for和v-if的优先级问题
+ 在Vue2中，v-for的优先级要高于v-if，这样在循环的时候，v-for会先创建元素，再经过v-if的条件判断，如果结果是false，再把创建的元素销毁，一创一销之间，造成性能的浪费！
+ 在Vue3中，v-if的优先级要高于v-for，这样在v-if中，是无法使用v-for循环的内容的
总之：不论是vue2还是vue3中，都不要把v-for和v-if做用在相同的元素上，如果有类似的需求，可以基于<template>标签，把v-for和v-if分开处理！！


==========================
面试题：v-html的安全问题
+ 在我之前的项目开发中，内容的渲染我基本上都是基于小胡子语法来处理的，但是此语法也有一个不足：如果渲染的内容包含“html标签字符串”，最后渲染的结果全部会作为普通字符串，无法把其识别为真正的html标签（类似于innerText），此时我们就需要基于 v-html 指令来渲染，这个指令可以把渲染内容中的“标签字符串”，变为真正的html标签（类似于innerHTML）!
+ 但是v-html的使用上需要“慎重”，官方有这样的提示：在网站上动态渲染任意HTML是非常危险的，因为容易导致XSS攻击(XSS:跨站脚本攻击,在网站上注入恶意的客户端代码)，所以只在可信内容上使用v-html，如果需要渲染的信息，是用户提交的内容，则要慎重再慎重！！
+ 如果必须要渲染这样的内容，则我们在渲染之前，需要对内容中，容易导致XSS攻击的标签，进行过滤处理（比如过滤掉 <script>、<iframe>、一些JS脚本等等）
  + 如果自己处理，则使用正则匹配解析...处理起来具备一定的难度，而此时我们会使用一些插件来解决
  + 推荐：vue-dompurify-html
    https://github.com/LeSuisse/vue-dompurify-html/tree/main/packages/vue-dompurify-html#readme
  + 推荐：vue-html-sanitizer
    https://github.com/daichirata/vue-sanitize
+ 还可以在用户提交信息的时候，对提交的内容直接做安全校验，但凡包含一些有安全隐患的内容，就不允许提交了！！


==========================
面试题：如何设置样式「面试题：Class 与 Style 如何动态绑定？」
https://v2.cn.vuejs.org/v2/guide/class-and-style.html


==========================
面试题：样式私有化方案
@1 scoped样式私有化实现的原理
  在没有设置 scoped 属性之前：   
    + 渲染的标签没有啥特殊处理
    + 编写的样式都是全局样式
    这样在组件合并渲染的时候，如果两个组件设置了相同的样式类名，就很可能发生样式冲突！在不使用任何技术方案的情况下，我们完全可以依托于“命名规范”，来解决样式冲突问题：
    + 让每个组件最外层样式类名是唯一的（比如：以路径+组件名+后缀，作为样式类的命名规范） 
      .home-demo-box{ ... }
    + 其内部元素的样式，都设置在这个唯一的样式类名下
      .home-demo-box{
         .link{
            ...
         }
      }
    但是此类方案，需要所有开发者，严格遵照此规范进行处理！
  但Vue中提供了专门的样式私有化处理方案scoped，一但给 <style> 设置 scoped 属性：
    + 每创建一个单文件组件，该组件都有一个唯一的 ID 值，比如：data-v-fecc192e
    + 当设置scoped之后，组件视图中出现的所有元素（包括调用的子组件的根元素「不含其内部元素」）都会被设置一个属性：组件的ID！
      <div data-v-fecc192e class="demo-box">
    + 并且我们在 <style> 中编写的样式，都被加上一个属性选择器
      .demo-box[data-v-fecc192e]{ ... }
    这样即便编写的样式还是全局样式，但是因为设置了属性选择器，只有拥有相同属性的元素，此样式才会对其生效！
    这就是Vue样式私有化的原理！！
@2 但是此类方案也存在弊端：调用子组件的内部元素（除根元素），是没有设置“组件ID”的这个属性的，如果在style中，给这些元素写样式，编写的样式是不生效的！！
  + 原因：编写的样式有属性选择器，但是结构上没有相关的属性
  + 解决方案：把编写样式中的属性选择器去掉即可，此时需要用到 :deep() 样式穿透！
    :deep(.el-icon-message){ ... }
    /deep/ .el-icon-message{ ... }
    所谓样式穿透，就是把我们写的样式中的“属性选择器”干掉！！

面试题：在 Vue 组件 <style lang='less' scoped> 中编写的样式没有生效，都可能存在哪些原因？以及该如何解决？
从我之前的开发经验中来讲，可能有两种情况：
  + 编写的样式权重不够，此时为了图简单，可以很暴利使用 !important，但是建议还是用其他方式调节权重即可！
  + 最常见的情况，就是给子组件内部元素编写样式，因为内部元素不会设置“组件唯一ID”这个属性，但是我们写的样式会设置上这样的属性选择器，所以样式不生效；此时我们基于 :deep 穿透一下即可！
  当然有时候也是因为项目太急，加班时间有点多，眼花写错了！！


==========================
面试题：自定义指令的玩法和作用


==========================
面试题：Vue怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？

==========================
面试题：Vue 组件中的 data 为什么必须是函数？

==========================
面试题：谈谈你对 Vue2 生命周期的理解？

==========================
面试题：简单说一下 $nextTick 的作用及实现原理？

==========================
面试题：computed 和 watch 的区别和运用的场景？