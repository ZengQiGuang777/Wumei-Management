在组件化开发的模式下，有一个非常重要的知识：如何抽离封装通用的组件！
我们封装的组件，按照特点可以分为：
  - 业务组件「针对于特点的项目，包含一定的业务逻辑」
    + 普通业务组件
      + 在SPA中，每一个路由页面都是一个组件
      + 一个页面内容比较多，我们开发的时候，把其拆分成多个组件（这些组件可能没有复用性），最后合并渲染
      + ...
    + 通用业务组件
      + 封装的组件会在很多地方用到（比如：推荐列表、新闻列表...）
      + ...
  - 功能组件「不单纯针对某一个项目，而是适用于很多项目」
    + UI组件库中提供的组件都是功能组件
      + 我们平时开发的时候，会结合当下的业务需求，对这些组件进行二次封装
      + 例如：button组件设置loading防抖效果；Table表格+筛选/分页等的二次封装；骨架屏的二次封装；
      + ...
    + 我们还会自己封装一些UI组件库不具备的组件「或者使用第三方插件」
      + 例如：大文件切片上传和断点续传；pdf/word/excel的预览；副文本编辑器；复杂的轮播图效果！
      + ...
但是不论封装啥类型的组件，最核心的思想：让组件具备更强的复用性，支持更多效果的实现！
  - 首先，我们要改变思想观念：开发项目之前，首先分析哪些东西是有类似的部分，需要进行封装提取的
    + 可能是把几个组件合并在一起，变为一个完整的通用组件
    + 也可能仅仅是调整一些样式，变为和项目风格统一的效果
    + 还可能是在原有组件的基础上，扩充一些单独的功能
    + 当然最主要的还是：包含结构、样式、功能，并通过别人使用的时候，传递不同的信息，我们实现不同的效果！
  - 如何让组件具备更强的复用性
    + 基于：属性、插槽、自定义事件、实例
    + 多参考相似的案例需求，进行归纳总结，在封装的时候，让其具备更多的不确定性
我们封装的组件，有不同的调用方式：
  - 直接在视图中调用渲染 <el-button></el-button>
    + 封装组件
    + 基于Vue.component注册为全局组件
  - 基于某些方法的执行进行渲染  this.$message.success('...')
    + 封装组件
    + 基于Vue.extend处理
封装组件的时候，我们基本上都使用<template>语法构建视图，但是其具备“弱编程性（不灵活）”，此时我们可以基于“JSX强编程性”的语法，来替代<template>语法！