面试题：vue中组件和插件有什么区别？
在Vue中，组件（Component）和插件（Plugin）是两个不同的概念，它们在功能和使用方式上有一些区别
  - 组件（Component）：
    + 组件是Vue应用中可重用的UI元素
    + 它们将HTML、CSS和JavaScript逻辑封装在一起，以创建独立的、可重用的功能单元
    + 组件可以包含模板（Template）、样式（Style）和行为（Behavior），使开发者能够构建具有组合性和可维护性的应用程序
    + 在Vue中，组件通过Vue.component()方法或单文件组件（.vue文件）再或者Vue.extend()的形式定义和注册
  - 插件（Plugin）：
    + 插件是Vue的扩展，用于向Vue应用添加全局功能
    + 插件可以添加新的全局方法、指令、混入（Mixin）或者为Vue实例添加新的功能
    + 它们可以在整个应用程序中使用，而不需要在每个组件中单独导入和配置
    + 插件通常是以Vue插件的形式提供，开发者可以使用Vue.use()方法在Vue应用中注册和安装插件
区别总结：
  + 组件用于创建可重用的UI元素，而插件用于向Vue应用添加全局功能
  + 组件通过Vue.component()方法或单文件组件的形式定义和注册，而插件通过Vue.use()方法注册和安装
  + 组件可以在应用的任何地方使用，但插件添加的功能可以在整个应用中全局访问
  + 组件通常包含模板、样式和行为，而插件主要用于添加全局方法、指令、混入或为Vue实例添加功能
需要注意的是，组件和插件并不是互斥的概念，它们可以同时在Vue应用中使用，以实现更丰富的功能和更高的可重用性!
记得组件和插件都列举一些实战例子...

==========================
面试题：介绍一下你对vuex的理解？
在我之前的项目中，vuex几乎是必用的（只不过后来的一个vue3项目中，我使用了pinia代替了vuex）
我基于pinia/vuex：
  + 首先，利用其公共状态管理的机制，实现复合组件间的通信
  + 其次，为了防止路由切换中，有些数据需要频繁向服务器发请求，我把这些不经常更新的数据，基于vuex/pinia进行了临时存储
  + 最后，之前项目中的“登录态校验&权限校验”，也是基于vuex存储一些登录者信息，来配合实现的
在我使用vuex的时候：
  + 首先要基于 Vue.use(Vuex) 使用这个插件，基于 new Vuex.Store 创建一个store容器，还需要把 store 挂载到根组件的配置项中，只有这样才可以保证每个组件的实例上都有 $store 这个属性！
  + Vuex的配置项中，核心的有 5 部分，还有 3 个辅助配置
    + state 管理公共状态
    + getters 管理公共的计算属性
    + mutations 修改公共状态的方法
    + actions 异步修改状态的方法「其内部，只是完成了异步操作，修改状态还需要基于 commit 通知  mutations 中的方法执行」
    + modules 在项目较大的情况下，分模块管理公共信息
    除此之外，还可以设置：
    + namespaced 这个是模块化管理必备的
    + strict 设置只允许在 mutations 方法中修改状态 
    + plugins 使用插件，比如我之前使用过 logger 插件，实现派发日志的输出；使用 persist 插件实现vuex信息的持久化存储！！
  + 在组件中使用的时候，基于 $store.state/getters 直接获取公共状态/计算属性，基于 $store.commit/dispatch 通知 mutations/actions 中的方法执行，实现公共状态更改！
  + 只不过这样每一次都操作 $store 比较麻烦，我一般都是基于 mapState/Getters/Mutations/Actions 等辅助函数处理的，可以简化vuex在组件中的使用，提高开发效率！
不过Vue3对应的Vuex4中，其使用的语法和一些细节，和Vuex3还是有很大差别的
  + 首先都是函数式编程，没有Store这个类，基于 createStore 创建 store 容器
  + 组件中也不需要 $store 这个属性了，基于 useStore 这个Hook函数，获取到store对象，然后进行相关操作
  + map辅助函数也没有用了，操作什么东西，都是基于store对象来处理，例如：store.state/getters/commit/dispatch 等等！
以上这些就是我平时在项目中，使用到的内容！vuex很有用，不仅可以实现组件之间的信息共享，还可以对一些数据进行临时的存储，操作起来还比较简单，所以在之前的项目中，vuex我基本上是必用的！「只不过我感觉，现在pinia比vuex更好用！」


==========================
面试题：vuex 页面刷新数据丟失怎么解决？



==========================
Vue.mixin(OptionsAPI) 全局混入
  - 在mixin中写入的内容，会混入到每一个组件中
    Vue.mixin({
      // 让每个组件都具备 x 状态
      data(){
        return {
          x:100 
        }
      },
      // 让每个组件都具备 created 钩子函数，并且执行里面做的事情
      created(){
        ...
      },
      ...
    })
  - 在真实项目中，所有组件（或大部分组件）都需要统一做的事情，可以基于 mixin 混入
  - 但是可能存在，混入的内容和组件自己的内容有相同的，此时 mixin 有自己的合并策略
    + data/methods/computed等（需要挂载到实例上的），如果发生冲突，以组件自己的为主
    + 钩子函数/监听器等，如果发生冲突，则两个都会保留，触发执行的时候，先执行 mixin 混入的，再执行组件自己的！
  - 虽然混入操作，看起来可以让所有组件具备一些相同的行为，但是本身是一个“坑”，真实开发中，我们应该减少“全局混入”的使用
    + 滥用全局混入操作，会给开发带来很多不便利性
    + 并且对于某些不需要“这些统一操作”的组件，带来了性能的浪费
  - 我们可以用局部混入，来代替全局混入
    const myMixin={
      data(){
        return {
          ...
        }
      },
      created(){
        ...
      },
      methods:{
        ...
      }
    }
    在需要使用这些混入功能的对象中，基于 mixins 把其混入进来
    export default {
      mixins:[myMixin]
    }