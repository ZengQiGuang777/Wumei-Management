从零开始，基于 Vue2全家桶 + ElementUI 构建一个管理系统类项目
  + 可以基于开源的框架来处理
    + Antd Vue Pro
    + 若依
    + ...
  + 也可以自己来搭建
==========================================
1. 基于 @vue/cli脚手架 创建工程化/组件化项目
  + 创建项目
  + 修改默认的配置项「vue.config.js && babel.config.js && package.json」
    + 基础配置
    + DEV-SERVER
    + 进阶配置
    + 浏览器兼容「PC端ToB管理系统，一般不需要处理兼容」
  + 组件库的按需导入「如果项目较大，需要用到的组件很多，则使用全量导入即可」
  + 安装项目所需要的一些模块
    + vue全家桶：vue@2 + vuex@3 + vue-router@3
    + axios 数据请求「也可以使用Fetch」
    + 工具类库
      + blueimp-md5
      + dayjs「类似的 moment.js」
      + lodash「lodash中不具备的或者内部实现不是很好的，我们可以自己封装一些方法，放在 utils/tool/lib.js...中」
      + ...
    + 统计图表
      + echarts
      + g2plot
      + d3js
      + WebGL + three.js  3D可视化
      + ...
    + UI组件库
      + element-ui
      + antd of vue@1
      + iview
      + ...
    + vuex-persist  vuex的持久化存储
    + xlsx  Excel表格的上传、下载、解析等
    + 副文本编辑器插件
    + Word/PDF 解析的插件
    ----
    + babel-plugin-component/import
    + less@4/less-loader@8
    + cross-env
    + ...

2. 搭建项目通用的架子
  @1 api 接口的统一管理
  @2 assets 公共静态资源的准备
  @3 components 把一些之前封装好的，本项目中需要使用的公共组件处理好
  @4 配置 vuex 的基础骨架
  @5 配置 vue-router 的基础骨架
    + 规划出路由该如何划分
    + 在 views 中把需要用到的组件，都先创建好「相关结构、样式、功能都先不写」
    + 开始构建路由的骨架
    + 在指定的位置放上 <router-view/>
  @6 全局通用的样式 App.vue
  ...

3. 划分任务，开始逐页面/组件开发「最重要的事情：一定要具备组件抽离封装的能力和意识」
4. 前后端联调「调用后台接口地址，实现数据通信」
5. 自测「自己测试」
6. 提测「交给测试人员处理」
  + 先打包
  + 把打包的内容部署到测试服务器
  + 测试反馈问题，开发解决问题，继续提测
  ...
7. 上线
  + 先打包
  + 部署到正式的服务器
  + 公测